<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
 "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"[]>
<book>
  <bookinfo>
    <title>
      Kanocc
    </title>
    <subtitle>Kanocc ain't no compiler-compiler</subtitle>
    <authorgroup>
      <author>
        <firstname>
          Christian 
        </firstname>
        <surname>
          Surlykke 
        </surname>
      </author>
    </authorgroup>
    <copyright>
      <year>
        2007 
      </year>
      <holder>
        Christian Surlykke 
      </holder>
    </copyright>
    <legalnotice>
      <para>
	Permission is granted to copy, distribute and/or modify this document under the terms 
	of the GNU Free Documentation License, Version 1.1 or any later version published by 
	the Free Software Foundation; with no Invariant Sections, with no Front-Cover Texts, 
	and with no Back-Cover Texts. A copy of the license is included in the section entitled 
	"GNU Free Documentation License". 
      </para>
    </legalnotice>
  </bookinfo>
  <chapter>
    <title>
      Disclaimers 
    </title>
    <itemizedlist>
      <listitem>
	<para>
          English is not my native language, and it shows in this document. My apologies.
	</para>
      </listitem>
      <listitem>
	<para>
	  Kanocc is largely untested software, so it will burn down your house, and break. 
          If this happens, you get to keep the pieces.
	</para>
      </listitem>
    </itemizedlist>
  </chapter>
  <chapter>
    <title>What is Kanocc?</title>
    <para>
      Kanocc is a Ruby-framework for parsing and translating for context-free grammars. 
    </para>
    <para>
      Kanocc tries to be 'scripty': Emphasis is on ease of use and seamless integration 
      with your Ruby programs. Performance is a secondary concern - so you probably won't 
      use Kanocc to do a production quality C++ compiler. I imagine that Kanocc could be 
      useful, for example, when your program is reading input that is best analyzed using 
      parsing techniques or perhaps when interpreting configuration files.
    </para>
    <para>
      Unlike compiler-compilers such as yacc or bison, Kanocc doesn't produce an intermediate 
      file (like a c-program) to be run through a compiler to produce an executable. Kanocc 
      will read your grammar and then parse and execute your input in one run. Hence it's name. 
    </para>
  </chapter>
  <chapter>
    <title>Reading this document</title>
    <para>
      In the following we'll assume that you know what a parser, a grammar or a
      syntax-directed translation is. If not, you'll have to do some reading. 
      There is a lot of literature you can choose from. In particular I 
      recommend 
      <ulink url="http://books.google.com/books?id=U92GGgAACAAJ&amp;dq=compilers+principles+techniques+and+tools">
      <citetitle>Compilers: Principles, Techniques and Tools</citetitle>
      </ulink> 
      (The Dragonbook), which was where I learned about the 
      subject. Also, the 
      <ulink url="http://www.gnu.org/software/bison/manual/index.html">
	<citetitle>Bison manual</citetitle>
      </ulink>
      contains much useful information.
    </para>
  </chapter>
  <chapter>
    <title>
      Getting and installing Kanocc
    </title>
    <para>
      Kanocc is available as a gem from RubyForge. Do
      <footnote>
	<para>You may have to be superuser to do that</para>
      </footnote>:
      <programlisting>
	gem install kanocc
      </programlisting>
      and then in your Ruby-scripts:
      <programlisting>
        require 'rubygems'
        require 'kanocc'
      </programlisting>
    </para>
  </chapter>
  <chapter>
    <title>Writing an interpreter</title>
      <para>
        In this chapter we'll look at how to write an interpreter using Kanocc. 
      </para>
      <para>
        Most texts on grammars, parsers and such use arithmetic expressions as example. 
        Obviously we don't want to be at odds with this tradition, so we'll do a simple interpreter,
        that can understand text containing arithmetic expressions - on per line - and print out 
        the values.
      </para>
      <para>
        The grammar looks like this:
        <programlisting>
          Program ::= Line Program
	            | "exit" "\n" 
 		   
 	  Line    ::= Expr "\n" 
	  
	  Expr    ::= Expr "+" Expr
       	            | Expr "-" Expr
       		    | Expr "*" Expr
       		    | Expr "/" Expr
       		    | "(" Expr ")"
       		    | Int
        </programlisting>
	This grammar is made up of:
	<itemizedlist>
	  <listitem>
	    <para>3 nonterminals: 
	      <literal>Program</literal>, 
	      <literal>Line</literal>, 
	      <literal>Expr</literal>
	    </para> 
	  </listitem>
	  <listitem>
	    <para>9 tokens: 
	      <literal>Int</literal> 
	      which is suppose to match a sequence of digits, and 8 string literals: 
	      <literal>"("</literal> ,
	      <literal>")"</literal> ,
	      <literal>"+"</literal> ,
	      <literal>"-"</literal> ,
	      <literal>"*"</literal> ,
	      <literal>"/"</literal> ,
	      <literal>"\n"</literal> ,
	      <literal>"exit"</literal>
	    </para>
          </listitem>
	</itemizedlist>
      </para>
      <para>
	With Kanocc, you can do an interpreter for the grammar above like this:
        <programlisting>
	  require "rubygems"   
	  require "kanocc"

          # ==================================================
          # Define the token 'Number' and what it matches 
          
          class Num < Kanocc::Token 
            attr_reader :val 
            setPattern(/\d+/) { @val = @m[0].to_i} 
          end
          
          # ==================================================
          # Define a grammar based on the nonterminals 'Expr', 
          # 'Line' and 'Program' 
          
          class Expr < Kanocc::Nonterminal 
            attr_reader :val 
          
            rule(Expr, "+", Expr) { @val = @rhs[0].val + @rhs[2].val}
            rule(Expr, "-", Expr) { @val = @rhs[0].val - @rhs[2].val}
            rule(Expr, "*", Expr) { @val = @rhs[0].val * @rhs[2].val}; prec 2
            rule(Expr, "/", Expr) { @val = @rhs[0].val / @rhs[2].val}; prec 2 
            rule("(", Expr, ")") { @val = @rhs[1].val} rule(Num) { @val = @rhs[0].val} 
          end
          
          class Line < Kanocc::Nonterminal 
            rule(Expr, "\n") {puts @rhs[0].val.to_s} 
            rule(Kanocc::Error, "\n") {puts "Sorry - didn't understand #{@program.slice[@start, @end - @start]}"}
          end
          
          class Program < Kanocc::Nonterminal 
            rule(Line, Program) 
            rule("exit", "\n") {puts "Goodbye!"} 
          end
          
          # ========== Set up a parser ====================== 
          myParser = Kanocc::Kanocc.new 
 
	  myParser.startSymbol = Program 
	  
	  # ========== And try it out ======================= 
          program = <<-EOT 
            3 + 4 - 2 
            8 - 2 * 3 
            8 * + 3 
            exit 
          EOT
          
          myParser << program
        </programlisting>
      </para>
      <para>
        If you run this script, you'll get:
	<screen>
          5 
          2 
          Sorry, didn't understand 8 * + 3 
          Goodbye!
	</screen>
        In the following we will go through the elements of this example
      </para>
    <sect1>
      <title>Tokens</title>
      <para>
	In our example we defined a class <literal>Number</literal>, 
	extending <literal>Kanocc::Token</literal>.
      </para>
      <para>
	By calling <literal>Kanocc::Token#setPattern</literal> we tell Kanocc how Numbers look. 
	<literal>setPattern</literal> must be given a regular expression as argument.
      </para>
      <para>
	By referring <literal>Number</literal> in our rules, we make Kanocc look for <literal>Number</literal> during lexical scanning. 
      </para>
      <para>
	Obviously, string literal tokens 
	(such as <literal>"("</literal>, <literal>"exit"</literal>, <literal>"\n"</literal>,..)
	doesn't need to have patterns attached. All you have to do is mention them in grammarrules,
	and Kanocc will look for them in the input.
      </para>
      <para>
	Tokens must always have a parameterless <literal>initialize</literal> method, 
	so that Kanocc knows how to create instances.
      </para>
      <sect2>
	<title>Semantics</title>
	<para>
	  You'll have noticed that the method <literal>Kanocc::Token.setPattern</literal> takes a block
	  it's final argument. This allows you to initialize the token instances that Kanocc creates.
	</para>
	<para>
	  When Kanocc recognizes a token (of the <literal>Kanocc::Token</literal> kind) in input, 
	  it will do the following:
	  <itemizedlist>
	    <listitem>
	      <para>
		Create an instance of the token - 
		in our example above an instance of <literal>Number</literal> - using it's parameterless
		constructor. 
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Create a <literal>match</literal> object by applying the regular expression you gave to 
		the portion of input being matched, and inject it into the newly created instance 
		(of <literal>Number</literal>) as <literal>@m</literal>
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Execute the block given to <literal>setPattern</literal> in the context of the newly 
		created instance.
	      </para>
	    </listitem>
	  </itemizedlist>
	  Note how, in our example, this allows us to set the instance variable <literal>@val</literal>
	  in those instances of <literal>Number</literal> that Kanocc creates during parsing.
	</para>
      </sect2>
      <sect2>
        <title>Precedence</title>
        <para>
  	..Todo..
        </para>
      </sect2>
    </sect1>
    <sect1> 
    <title>Whitespace</title>
    <para>
      By default Kanocc considers anything that matches
      <programlisting>
	/\s/,
      </programlisting>
      whitespace. 
    </para>
    <para>
      You may redefine this, if you wish, by calling the method <literal>Kanocc::Kanocc.setWhitespace </literal>. 
    </para>
    <para>
      For example, to define that spaces, tabs and anything from a '<literal>#</literal>' to lineending 
      is whitespace, you can do:
      <programlisting>
	myParser = Kanocc::Kanocc.new
	myParser.setWhitespace(/ /, /\t/, /#.*/)
      </programlisting>
      You have all the power of Ruby regular expressions at your disposal here.
    </para>
    <para>
      If you're <emphasis>very</emphasis> observant, you'll have noticed that the literal <literal>"\n"</literal> which 
      we used in our example above is also whitespace. This is ok. Kanocc will always try first to form 
      tokens from input. If that's not possible it will try to discard some of it as whitespace. If
      that isn't possible either, Kanocc will form a literal token from the first character of the remaining input
      <footnote><para>This scheme has the nice quality that lexical scanning 
      (the process of transforming input to a stream of tokens) never fails.</para></footnote>.
    </para>
    </sect1>
    <sect1>
    <title>Nonterminals</title>
    <para>
      In our example we defined 3 classes: <literal>Expr</literal>, <literal>Line</literal> and <literal>Program</literal>, 
      each of them extending <literal>Kanocc::Nonterminal</literal>. 
      This is how we tell Kanocc about the nonterminals of our grammar.
    </para>
    <para>
      Inside each class definition we make calls to the static method <literal>rule</literal>.
      With this we define the grammarrules belonging to that that particular nonterminal. 
      For examle, the definition of the class <literal>Expr</literal> tells Kanocc about the rules:
      <programlisting><![CDATA[ 
	Expr ::= Expr "+" Expr
               | Expr "-" Expr
               | Expr "*" Expr 
               | Expr "/" Expr 
               | "(" Expr ")" 
	       | Number
      ]]>	       
      </programlisting>
      The arguments to calls to <literal>rule</literal> must be nonterminals 
      (that means: classes that inherit from <literal>Kanocc::Nonterminal</literal>), 
      tokens (classes that inherit from <literal>Kanoc::Token</literal>) or strings, e.g: 
      <literal>Expr</literal>, <literal>Number</literal>, <literal>"exit"</literal>.
    </para>
    <para>
      Nonterminals must always have parameterless <literal>initialize</literal> method so Kanocc 
      can create instances of them.
    </para>
    
    <sect2> 
    <title>Semantics</title>
    <para>
      Like <literal>Kanocc::Token.setPattern</literal>, <literal>Kanocc::Nonterminal.rule</literal>
      accepts a block as it's final argument. This allows you to attach semantics to grammarrules. 
    </para>
    <para>
      Here's how it works.
      When Kanocc decides to do a reduction by a grammarrule, say:
      <programlisting>
        Expr ::= Expr "+" Expr
      </programlisting>
      it will already have created two instances of the class <literal>Expr</literal>, one for each occurrence of 
      <literal>Expr</literal> on the righthand side. Lets call these instances <literal>e1</literal> and 
      <literal>e2</literal>, respectively.
    </para>
    <para>
      When Kanocc does the reduction it:
      <orderedlist>
	<listitem>
	  <para>
	    Calls <literal>Expr.new </literal> to create a new instance of <literal>Expr</literal>.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Injects the array <literal>[e1, "+", e2]</literal> into this instance as <literal>@rhs</literal>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Excecutes the given block in the context of this newly created instance
	  </para>
	</listitem>
      </orderedlist>
    </para>
  </sect2>

  <sect2>
    <title>Precedence</title>
    <para>
      Kanocc supports 2 forms of precedence: 
      
      <itemizedlist>
        <listitem>
	  <para>rule-precedence </para>
	</listitem>
	<listitem>
	  <para>operator-precedence</para>
	</listitem>
      </itemizedlist>
    </para>
    <sect3>
      <title>Rule-precedence</title>
      <para>
	You assign precedence to a rule by following the call to rule by a call to 
	<programlisting>
	  Nonterminal.prec
	</programlisting> 
	with an integer as argument. Default precedence is 0, so if you give a 
	precedence > 0 you increase precedence - i.e make Kanocc more inclined to use the production.
      </para>
      <para>
	In our example, we defined the class <literal>Expr</literal> as:
	<programlisting>
	  class Expr < Kanocc::Nonterminal 
            attr_reader :val 
          
            rule(Expr, "+", Expr) { @val = @rhs[0].val + @rhs[2].val}
            rule(Expr, "-", Expr) { @val = @rhs[0].val - @rhs[2].val}
            rule(Expr, "*", Expr) { @val = @rhs[0].val * @rhs[2].val}; prec 2
            rule(Expr, "/", Expr) { @val = @rhs[0].val / @rhs[2].val}; prec 2 
            rule("(", Expr, ")") { @val = @rhs[1].val} rule(Num) { @val = @rhs[0].val} 
          end.
	</programlisting>
	The two calls to <literal>prec</literal> gave the rules for multiplication and division higher precedence.
      </para>
    </sect3>
    <sect3>
      <title>Operator precedence</title>
      <para>
	You can call:
	<programlisting>
	  Kanocc::Nonterminal.oPrec
	</programlisting>
	, to assign precedence to an operator in your grammar. For example: 
	<programlisting>
	  oPrec('*', 2).
	</programlisting>
      </para>
      <para>
	In our example we could have defined the class <literal>Expr</literal> as:
	<programlisting>
          class Expr < Kanocc::Nonterminal 
            attr_reader :val 
          
            rule(Expr, "+", Expr) { @val = @rhs[0].val + @rhs[2].val}
            rule(Expr, "-", Expr) { @val = @rhs[0].val - @rhs[2].val}
            rule(Expr, "*", Expr) { @val = @rhs[0].val * @rhs[2].val}; 
            rule(Expr, "/", Expr) { @val = @rhs[0].val / @rhs[2].val};  
            rule("(", Expr, ")") { @val = @rhs[1].val} rule(Num) { @val = @rhs[0].val} 
	    oPrec('*', '/', 2)
	  end.
	</programlisting>
	When you define operator precedence, Kanocc will apply it to those rules that have the operator as it's
	first terminal on the righthand-side. <footnote><para>I think this is how Yacc/Bison works.</para></footnote>
      </para>
      <para>
	<literal>oPrec</literal> takes a variable number of arguments. If you give it 
	<literal>N</literal> 
	arguments, the first <literal>N-1</literal> of them must be terminals and the last must be a number.
      </para>
      <para>
	When you call <literal>Kanocc::Nonterminal.oPrec</literal> like this, 
	it will have effect when Kanocc is considering two rules belonging to the nonterminal 
	where you made the call - in this example <literal>Expr</literal>.
      </para>
      <para>
	Alternatively you can define operator precedence globally, calling:
	<programlisting>
	  Kanocc#oPrec. 
	</programlisting>
	In our example it would look like:	
	<programlisting>
          class Expr < Kanocc::Nonterminal 
            attr_reader :val 
          
            rule(Expr, "+", Expr) { @val = @rhs[0].val + @rhs[2].val}
            rule(Expr, "-", Expr) { @val = @rhs[0].val - @rhs[2].val}
            rule(Expr, "*", Expr) { @val = @rhs[0].val * @rhs[2].val}; 
            rule(Expr, "/", Expr) { @val = @rhs[0].val / @rhs[2].val};  
            rule("(", Expr, ")") { @val = @rhs[1].val} rule(Num) { @val = @rhs[0].val} 
	  end.
	</programlisting>
	- and then:
	<programlisting>
	  myParser = Kanocc::Kanocc.new
	  myParser.oPrec('*', '/', 2)
	</programlisting>
	This will have effect when Kanocc is considering any pair of rules. 
      </para>
      <para>
	In some languages an operator may have different 
	meanings in different contexts. Think, for example, about the operator '*' in C. 
	It can mean multiplication and 
	pointer-indirection. By making your operator-precedence assignments at the nonterminal level, 
	you can make your grammar more readable.
      </para>
    </sect3>
  </sect2>
 </sect1>


  <sect1> 
    <title>Setting up the parser</title>
    <para>
      Once you have your tokens and nonterminals in place, the rest is simple: 
      Create an instance of <literal>Kanocc::Kanocc</literal>, tell it which nonterminal is the startsymbol, and feed 
      it some input.
    </para>
    <para>
      In our example:
      <programlisting><![CDATA[
	myParser = Kanocc::Kanocc.new
	myParser.startSymbol = Program
	.
	.
	myParser << program 
	]]>
      </programlisting>
      did that.
    </para>
  </sect1>


  <sect1>
    <title>Error handling</title>
    <para>
      Kanocc has a special nonterminal <literal>Kanocc::Error</literal> which may be used on the 
      right-hand-side of rules. <literal>Error</literal> can expand to anything, and rules containing 
      <literal>Error</literal> on their right-hand-side will have a precedence of -&#x221e;. In other words: 
      A rule containing <literal>Error</literal> will only be used if Kanocc can see no other way to reduce 
      the input to the start symbol.
    </para>
    <para>
      In our example above we had, in the class Line: 
      <programlisting>
        rule (Error, '\n') {puts "Sorry didn't understand" + rhs(0).str}
      </programlisting>
      - which allowed output of an error message whenever a line in input could not be 
      reduced to an expression.
    </para>
    <para>
      To facillitate error messaging, an instance of <literal>Kanocc::Error</literal> will have set two instance
      variables:
    </para>
    <para>
      <itemizedlist>
	<listitem>
	  <para>
	    <literal>@program</literal> which refers the input being processed.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <literal>@start</literal> which indexes the first character of the part of input that has been
	    reduced to this error.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <literal>@end</literal> which indexes the first character <emphasis>after</emphasis> the erronous 
	    part of input.
	  </para>
	</listitem>
      </itemizedlist>
    </para>
    <para>
      In our example, <literal>@program</literal> would reference the string :
	<programlisting>
	  <<-EOT 
            3 + 4 - 2
            8 - 2 * 3
            8 * + 3
            exit 
          EOT
	</programlisting>,
	<literal>@start</literal> and <literal>@end</literal> would have the values 23 and 34 respectively, so that
	<programlisting>
	  @program[@start, @end]
	</programlisting>
	would give
	<screen>
	  "  8 * + 3 "
	</screen>
   </para>
  </sect1>


</chapter> 
  <chapter>
    <title>Lists</title>
    <para>
      Often, a language you define will contain lists of stuff. Kanocc comes with 
      two metods for this particular purpose: <literal>zm</literal> ('zero or more') 
      and <literal>om</literal> ('one or more'). 
      Both methods take as their first argument the grammarsymbol that make up the list, 
      and as an optional second parameter, a symbol that will be used as a separator.
    </para>
    <para>
      Thus, <literal>zm(A)</literal>, means a (possibly empty) list of <literal>A</literal>'s, and 
      <literal>zm(A, ";")</literal> means a 
      (possibly empty) list of <literal>A</literal>'s separated by semicolons.
    </para>
    <para>
      You may also feed <literal>zm</literal> and <literal>om</literal> arrays - 
      <literal>zm([A, B, C], ",")</literal> would accept lists like:
      <programlisting>
        A B C, A B C, A B C, A B C
      </programlisting>
      In our calculator example we could have written the <literal>Program</literal> class using <literal>zm</literal>, as:
      <programlisting>
	class Program < Kanocc::Nonterminal
	  rule(zm(Line), "exit", "\n")
	end
      </programlisting>
    </para>
    <para>
      As an other example, consider compund statements - a sequence of statements surrounded by 
      <literal>"begin"</literal> and <literal>"end"</literal> 
      and separated by semicolons. For example:
      <programlisting><![CDATA[
	begin
	  <stmt>;
	  <stmt>;
          <stmt>
	end
   ]]></programlisting>
    </para>
    <para>
      In Kanocc you can write a grammar for that like:
      <programlisting>
	class CompoundStatement < Kanocc::Nonterminal
	  rule("begin", zm(Statement, ";"), "end")
	end
      </programlisting>
    </para>
  </chapter>
  <chapter>
    <title>Debugging and loggin</title>
    <para>
      &lt;TODO&gt;
    </para>
  </chapter>
  <chapter>
    <title>Internals of Kanocc</title>
    <para>
      &lt;TODO&gt;
    </para>
  </chapter>

  <appendix id="gfdl">
    <title>GNU Free Documentation License</title>
    <para>
      Copyright (C) 2000, 2001, 2002 Free Software Foundation,
      <abbrev>Inc.</abbrev> 51 Franklin <abbrev>St</abbrev>, Fifth Floor,
      Boston, <abbrev>MA</abbrev> 02110-1301 <abbrev
      role="initialism">USA</abbrev>.  Everyone is permitted to copy and
      distribute verbatim copies of this license document, but changing it is
      not allowed.
    </para>
    <bridgehead id="Preamble" renderas="sect1">
      0. PREAMBLE
    </bridgehead>
    <para>
      The purpose of this License is to make a manual, textbook, or other
      functional and useful document "free" in the sense of freedom: to assure
      everyone the effective freedom to copy and redistribute it, with or
      without modifying it, either commercially or noncommercially.
      Secondarily, this License preserves for the author and publisher a way to
      get credit for their work, while not being considered responsible for
      modifications made by others.
    </para>
    <para>
      This License is a kind of "copyleft", which means that derivative works of
      the document must themselves be free in the same sense.  It complements
      the GNU General Public License, which is a copyleft license designed for
      free software.
    </para>
    <para>
      We have designed this License in order to use it for manuals for free
      software, because free software needs free documentation: a free program
      should come with manuals providing the same freedoms that the software
      does.  But this License is not limited to software manuals; it can be used
      for any textual work, regardless of subject matter or whether it is
      published as a printed book.  We recommend this License principally for
      works whose purpose is instruction or reference.</para>
    <bridgehead id="Definitions" renderas="sect1">
      1. APPLICABILITY AND DEFINITIONS
    </bridgehead>
    <para>
      This License applies to any manual or other work, in any medium, that
      contains a notice placed by the copyright holder saying it can be
      distributed under the terms of this License.  Such a notice grants a
      world-wide, royalty-free license, unlimited in duration, to use that work
      under the conditions stated herein.  The "Document", below, refers to any
      such manual or work.  Any member of the public is a licensee, and is
      addressed as "you".  You accept the license if you copy, modify or
      distribute the work in a way requiring permission under copyright
      law.
    </para>
    <para>
      A "Modified Version" of the Document means any work containing the
      Document or a portion of it, either copied verbatim, or with modifications
      and/or translated into another language.
    </para>
    <para>
      A "Secondary Section" is a named appendix or a front-matter section of the
      Document that deals exclusively with the relationship of the publishers or
      authors of the Document to the Document's overall subject (or to related
      matters) and contains nothing that could fall directly within that overall
      subject.  (Thus, if the Document is in part a textbook of mathematics, a
      Secondary Section may not explain any mathematics.)  The relationship
      could be a matter of historical connection with the subject or with
      related matters, or of legal, commercial, philosophical, ethical or
      political position regarding them.
    </para>
    <para>
      The "Invariant Sections" are certain Secondary Sections whose titles are
      designated, as being those of Invariant Sections, in the notice that says
      that the Document is released under this License.  If a section does not
      fit the above definition of Secondary then it is not allowed to be
      designated as Invariant.  The Document may contain zero Invariant
      Sections.  If the Document does not identify any Invariant Sections then
      there are none.
    </para>
    <para>
      The "Cover Texts" are certain short passages of text that are listed, as
      Front-Cover Texts or Back-Cover Texts, in the notice that says that the
      Document is released under this License.  A Front-Cover Text may be at
      most 5 words, and a Back-Cover Text may be at most 25 words.
    </para>
    <para>
      A "Transparent" copy of the Document means a machine-readable copy,
      represented in a format whose specification is available to the general
      public, that is suitable for revising the document straightforwardly with
      generic text editors or (for images composed of pixels) generic paint
      programs or (for drawings) some widely available drawing editor, and that
      is suitable for input to text formatters or for automatic translation to a
      variety of formats suitable for input to text formatters.  A copy made in
      an otherwise Transparent file format whose markup, or absence of markup,
      has been arranged to thwart or discourage subsequent modification by
      readers is not Transparent.  An image format is not Transparent if used
      for any substantial amount of text.  A copy that is not "Transparent" is
      called "Opaque".
    </para>
    <para>
      Examples of suitable formats for Transparent copies include plain ASCII
      without markup, Texinfo input format, LaTeX input format, SGML or XML
      using a publicly available DTD, and standard-conforming simple HTML,
      PostScript or PDF designed for human modification.  Examples of
      transparent image formats include PNG, XCF and JPG.  Opaque formats
      include proprietary formats that can be read and edited only by
      proprietary word processors, SGML or XML for which the DTD and/or
      processing tools are not generally available, and the machine-generated
      HTML, PostScript or PDF produced by some word processors for output
      purposes only.
    </para>
    <para>
      The "Title Page" means, for a printed book, the title page itself, plus
      such following pages as are needed to hold, legibly, the material this
      License requires to appear in the title page.  For works in formats which
      do not have any title page as such, "Title Page" means the text near the
      most prominent appearance of the work's title, preceding the beginning of
      the body of the text.
    </para>
    <para>
      A section "Entitled XYZ" means a named subunit of the Document whose title
      either is precisely XYZ or contains XYZ in parentheses following text that
      translates XYZ in another language.  (Here XYZ stands for a specific
      section name mentioned below, such as "Acknowledgements", "Dedications",
      "Endorsements", or "History".)  To "Preserve the Title" of such a section
      when you modify the Document means that it remains a section "Entitled
      XYZ" according to this definition.
    </para>
    <para>
      The Document may include Warranty Disclaimers next to the notice which
      states that this License applies to the Document.  These Warranty
      Disclaimers are considered to be included by reference in this License,
      but only as regards disclaiming warranties: any other implication that
      these Warranty Disclaimers may have is void and has no effect on the
      meaning of this License.
    </para>
    <bridgehead id="VerbatimCopying" renderas="sect1">
      2. VERBATIM COPYING
    </bridgehead>
    <para>
      You may copy and distribute the Document in any medium, either
      commercially or noncommercially, provided that this License, the copyright
      notices, and the license notice saying this License applies to the
      Document are reproduced in all copies, and that you add no other
      conditions whatsoever to those of this License.  You may not use technical
      measures to obstruct or control the reading or further copying of the
      copies you make or distribute.  However, you may accept compensation in
      exchange for copies.  If you distribute a large enough number of copies
      you must also follow the conditions in section 3.
    </para>
    <para>
      You may also lend copies, under the same conditions stated above, and you
      may publicly display copies.
    </para>
    <bridgehead id="QuantityCopying" renderas="sect1">
      3. COPYING IN QUANTITY
    </bridgehead>
    <para>
      If you publish printed copies (or copies in media that commonly have
      printed covers) of the Document, numbering more than 100, and the
      Document's license notice requires Cover Texts, you must enclose the
      copies in covers that carry, clearly and legibly, all these Cover Texts:
      Front-Cover Texts on the front cover, and Back-Cover Texts on the back
      cover.  Both covers must also clearly and legibly identify you as the
      publisher of these copies.  The front cover must present the full title
      with all words of the title equally prominent and visible.  You may add
      other material on the covers in addition.  Copying with changes limited to
      the covers, as long as they preserve the title of the Document and satisfy
      these conditions, can be treated as verbatim copying in other
      respects.
    </para>
    <para>
      If the required texts for either cover are too voluminous to fit legibly,
      you should put the first ones listed (as many as fit reasonably) on the
      actual cover, and continue the rest onto adjacent pages.
    </para>
    <para>
      If you publish or distribute Opaque copies of the Document numbering more
      than 100, you must either include a machine-readable Transparent copy
      along with each Opaque copy, or state in or with each Opaque copy a
      computer-network location from which the general network-using public has
      access to download using public-standard network protocols a complete
      Transparent copy of the Document, free of added material.  If you use the
      latter option, you must take reasonably prudent steps, when you begin
      distribution of Opaque copies in quantity, to ensure that this Transparent
      copy will remain thus accessible at the stated location until at least one
      year after the last time you distribute an Opaque copy (directly or
      through your agents or retailers) of that edition to the public.
    </para>
    <para>
      It is requested, but not required, that you contact the authors of the
      Document well before redistributing any large number of copies, to give
      them a chance to provide you with an updated version of the
      Document.
    </para>
    <bridgehead id="Modifications" renderas="sect1">
      4. MODIFICATIONS
    </bridgehead>
    <para>
      You may copy and distribute a Modified Version of the Document under the
      conditions of sections 2 and 3 above, provided that you release the
      Modified Version under precisely this License, with the Modified Version
      filling the role of the Document, thus licensing distribution and
      modification of the Modified Version to whoever possesses a copy of it.
      In addition, you must do these things in the Modified Version:
    </para>
    <orderedlist numeration="upperalpha">
      <listitem>
        <simpara>
          Use in the Title Page (and on the covers, if any) a title distinct
          from that of the Document, and from those of previous versions (which
          should, if there were any, be listed in the History section of the
          Document).  You may use the same title as a previous version if the
          original publisher of that version gives permission.
          </simpara>
      </listitem>
      <listitem>
        <simpara>
          List on the Title Page, as authors, one or more persons or entities
          responsible for authorship of the modifications in the Modified
          Version, together with at least five of the principal authors of the
          Document (all of its principal authors, if it has fewer than five),
          unless they release you from this requirement.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          State on the Title page the name of the publisher of the Modified
          Version, as the publisher.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Preserve all the copyright notices of the Document.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Add an appropriate copyright notice for your modifications adjacent to
          the other copyright notices.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Include, immediately after the copyright notices, a license notice
          giving the public permission to use the Modified Version under the
          terms of this License, in the form shown in the Addendum below.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Preserve in that license notice the full lists of Invariant Sections
          and required Cover Texts given in the Document's license notice.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Include an unaltered copy of this License.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Preserve the section Entitled "History", Preserve its Title, and add
          to it an item stating at least the title, year, new authors, and
          publisher of the Modified Version as given on the Title Page.  If
          there is no section Entitled "History" in the Document, create one
          stating the title, year, authors, and publisher of the Document as
          given on its Title Page, then add an item describing the Modified
          Version as stated in the previous sentence.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Preserve the network location, if any, given in the Document for
          public access to a Transparent copy of the Document, and likewise the
          network locations given in the Document for previous versions it was
          based on.  These may be placed in the "History" section.  You may omit
          a network location for a work that was published at least four years
          before the Document itself, or if the original publisher of the
          version it refers to gives permission.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          For any section Entitled "Acknowledgements" or "Dedications", Preserve
          the Title of the section, and preserve in the section all the
          substance and tone of each of the contributor acknowledgements and/or
          dedications given therein.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Preserve all the Invariant Sections of the Document, unaltered in
          their text and in their titles.  Section numbers or the equivalent are
          not considered part of the section titles.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Delete any section Entitled "Endorsements".  Such a section may not be
          included in the Modified Version.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Do not retitle any existing section to be Entitled "Endorsements" or
          to conflict in title with any Invariant Section.
        </simpara>
      </listitem>
      <listitem>
        <simpara>
          Preserve any Warranty Disclaimers.
        </simpara>
      </listitem>
    </orderedlist>
    <para>
      If the Modified Version includes new front-matter sections or appendices
      that qualify as Secondary Sections and contain no material copied from the
      Document, you may at your option designate some or all of these sections
      as invariant.  To do this, add their titles to the list of Invariant
      Sections in the Modified Version's license notice.  These titles must be
      distinct from any other section titles.
    </para>
    <para>
      You may add a section Entitled "Endorsements", provided it contains
      nothing but endorsements of your Modified Version by various parties--for
      example, statements of peer review or that the text has been approved by
      an organization as the authoritative definition of a standard.
    </para>
    <para>
      You may add a passage of up to five words as a Front-Cover Text, and a
      passage of up to 25 words as a Back-Cover Text, to the end of the list of
      Cover Texts in the Modified Version.  Only one passage of Front-Cover Text
      and one of Back-Cover Text may be added by (or through arrangements made
      by) any one entity.  If the Document already includes a cover text for the
      same cover, previously added by you or by arrangement made by the same
      entity you are acting on behalf of, you may not add another; but you may
      replace the old one, on explicit permission from the previous publisher
      that added the old one.
    </para>
    <para>
      The author(s) and publisher(s) of the Document do not by this License give
      permission to use their names for publicity for or to assert or imply
      endorsement of any Modified Version.
    </para>
    <bridgehead id="Combining" renderas="sect1">
      5. COMBINING DOCUMENTS
    </bridgehead>
    <para>
      You may combine the Document with other documents released under this
      License, under the terms defined in section 4 above for modified versions,
      provided that you include in the combination all of the Invariant Sections
      of all of the original documents, unmodified, and list them all as
      Invariant Sections of your combined work in its license notice, and that
      you preserve all their Warranty Disclaimers.
    </para>
    <para>
      The combined work need only contain one copy of this License, and multiple
      identical Invariant Sections may be replaced with a single copy.  If there
      are multiple Invariant Sections with the same name but different contents,
      make the title of each such section unique by adding at the end of it, in
      parentheses, the name of the original author or publisher of that section
      if known, or else a unique number.  Make the same adjustment to the
      section titles in the list of Invariant Sections in the license notice of
      the combined work.
    </para>
    <para>
      In the combination, you must combine any sections Entitled "History" in
      the various original documents, forming one section Entitled "History";
      likewise combine any sections Entitled "Acknowledgements", and any
      sections Entitled "Dedications".  You must delete all sections Entitled
      "Endorsements".
    </para>
    <bridgehead id="Collections" renderas="sect1">
      6. COLLECTIONS OF DOCUMENTS
    </bridgehead>
    <para>
      You may make a collection consisting of the Document and other documents
      released under this License, and replace the individual copies of this
      License in the various documents with a single copy that is included in
      the collection, provided that you follow the rules of this License for
      verbatim copying of each of the documents in all other respects.
    </para>
    <para>
      You may extract a single document from such a collection, and distribute
      it individually under this License, provided you insert a copy of this
      License into the extracted document, and follow this License in all other
      respects regarding verbatim copying of that document.
    </para>
    <bridgehead id="Aggregation" renderas="sect1">
      7. AGGREGATION WITH INDEPENDENT WORKS
    </bridgehead>
    <para>
      A compilation of the Document or its derivatives with other separate and
      independent documents or works, in or on a volume of a storage or
      distribution medium, is called an "aggregate" if the copyright resulting
      from the compilation is not used to limit the legal rights of the
      compilation's users beyond what the individual works permit.  When the
      Document is included in an aggregate, this License does not apply to the
      other works in the aggregate which are not themselves derivative works of
      the Document.
    </para>
    <para>
      If the Cover Text requirement of section 3 is applicable to these copies
      of the Document, then if the Document is less than one half of the entire
      aggregate, the Document's Cover Texts may be placed on covers that bracket
      the Document within the aggregate, or the electronic equivalent of covers
      if the Document is in electronic form.  Otherwise they must appear on
      printed covers that bracket the whole aggregate.
    </para>
    <bridgehead id="Translation" renderas="sect1">
      8. TRANSLATION
    </bridgehead>
    <para>
      Translation is considered a kind of modification, so you may distribute
      translations of the Document under the terms of section 4.  Replacing
      Invariant Sections with translations requires special permission from
      their copyright holders, but you may include translations of some or all
      Invariant Sections in addition to the original versions of these Invariant
      Sections.  You may include a translation of this License, and all the
      license notices in the Document, and any Warranty Disclaimers, provided
      that you also include the original English version of this License and the
      original versions of those notices and disclaimers.  In case of a
      disagreement between the translation and the original version of this
      License or a notice or disclaimer, the original version will prevail.
    </para>
    <para>
      If a section in the Document is Entitled "Acknowledgements",
      "Dedications", or "History", the requirement (section 4) to Preserve its
      Title (section 1) will typically require changing the actual title.
    </para>
    <bridgehead id="Termination" renderas="sect1">
      9. TERMINATION
    </bridgehead>
    <para>
      You may not copy, modify, sublicense, or distribute the Document except as
      expressly provided for under this License.  Any other attempt to copy,
      modify, sublicense or distribute the Document is void, and will
      automatically terminate your rights under this License.  However, parties
      who have received copies, or rights, from you under this License will not
      have their licenses terminated so long as such parties remain in full
      compliance.
    </para>
    <bridgehead id="FutureRevisions" renderas="sect1">
      10. FUTURE REVISIONS OF THIS LICENSE
    </bridgehead>
    <para>
      The Free Software Foundation may publish new, revised versions of the GNU
      Free Documentation License from time to time.  Such new versions will be
      similar in spirit to the present version, but may differ in detail to
      address new problems or concerns.  See <ulink
      url="http://www.gnu.org/copyleft/">http://www.gnu.org/copyleft/</ulink>.
    </para>
    <para>
      Each version of the License is given a distinguishing version number.  If
      the Document specifies that a particular numbered version of this License
      "or any later version" applies to it, you have the option of following the
      terms and conditions either of that specified version or of any later
      version that has been published (not as a draft) by the Free Software
      Foundation.  If the Document does not specify a version number of this
      License, you may choose any version ever published (not as a draft) by the
      Free Software Foundation.
    </para>
    <bridgehead id="HowToUse" renderas="sect1">
      ADDENDUM: How to use this License for your documents
    </bridgehead>
    <para>
      To use this License in a document you have written, include a copy of the
      License in the document and put the following copyright and license
      notices just after the title page:
    </para>
    <blockquote>
      <para>
        Copyright (C) YEAR YOUR NAME.
      </para>
      <para>
        Permission is granted to copy, distribute and/or modify this document
        under the terms of the GNU Free Documentation License, Version 1.2 or
        any later version published by the Free Software Foundation; with no
        Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
        copy of the license is included in the section entitled "GNU Free
        Documentation License".
      </para>
    </blockquote>
    <para>
      If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
      replace the "with...Texts." line with this:
    </para>
    <blockquote>
      <para>
        with the Invariant Sections being LIST THEIR TITLES, with the
        Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
      </para>
    </blockquote>
    <para>
      If you have Invariant Sections without Cover Texts, or some other
      combination of the three, merge those two alternatives to suit the
      situation.
    </para>
    <para>
      If your document contains nontrivial examples of program code, we
      recommend releasing these examples in parallel under your choice of free
      software license, such as the GNU General Public License, to permit their
      use in free software.
    </para>
  </appendix>
</book>
